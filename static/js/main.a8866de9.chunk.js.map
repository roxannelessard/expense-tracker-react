{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","onChange","e","onChangeFilter","target","value","selected","ExpenseDate","month","date","toLocaleString","year","getFullYear","day","ExpenseItem","title","amount","ExpensesList","expensesContent","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","NewExpense","enteredExpenseData","random","onAddExpense","dummyData","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8866de9.chunk.js","sourcesContent":["import './Card.css';\n\nconst Card = (props) => {\n  // don't forget to put the whitespace to separate de class names (it is a long string)\n  const classes = 'card ' + props.className;\n\n  return (\n    // children is what's inside my Card component\n    <div className={classes}>{props.children}</div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\n\nimport './ExpensesFilter.css';\n\nconst ExpensesFilter = (props) => {\n  const dropdownChangeHandler = (e) => {\n    props.onChangeFilter(e.target.value);\n  };\n\n  return (\n    <div className=\"expenses-filter\">\n      <div className=\"expenses-filter__control\">\n        <label>Filter by year</label>\n        <select onChange={dropdownChangeHandler} value={props.selected}>\n          <option value=\"2022\">2022</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2019\">2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;\n","import \"./ExpenseDate.css\";\n\nconst ExpenseDate = (props) => {\n  // Add .toISOString() because it is a date object\n  const month = props.date.toLocaleString(\"en-us\", { month: \"long\" });\n  const year = props.date.getFullYear();\n  const day = props.date.toLocaleString(\"en-us\", { day: \"2-digit\" });\n  return (\n    <div className=\"expense-date\">\n      <div className=\"expense-date__month\">{month}</div>\n      <div className=\"expense-date__year\">{year}</div>\n      <div className=\"expense-date__day\">{day}</div>\n    </div>\n  );\n}\n\nexport default ExpenseDate;\n","import \"./ExpenseItem.css\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\n// import React, { useState } from 'react';\n\nconst ExpenseItem = (props) => {\n  // with use state we're creating a variable which will lead to call this function again\n  // props.title is the default value\n  // it returns a function which we can then call to assign a new value\n  // (we'll be assigning new values by calling a function) for that UseState returns an array [currentStateValue, updatingFunction]\n  // so we use array destructuring to store the elements\n  // state is separated on a per component basis\n  // const [title, setTitle] = useState(props.title);\n\n  // const clickHandler = () => {\n  //   // by calling setTitle() the component return by the function will be executed again!\n  //   setTitle(\"Updated\");\n  //   console.log(title);\n  // };\n\n  return (\n    // you can't use your custom components as wrappers around other kind of content\n    <li>\n      <Card className=\"expense-item\">\n        <ExpenseDate date={props.date} />\n        <div className=\"expense-item__description\">\n          <h2>{props.title}</h2>\n        </div>\n        <div className=\"expense-item__price\">{props.amount}</div>\n        {/* you write clickHandler without the () because you just want to point at the function & not execute the code right now */}\n      </Card>\n    </li>\n  );\n}\n\nexport default ExpenseItem;\n","import ExpenseItem from './ExpenseItem';\nimport './ExpensesList.css';\n\nconst ExpensesList = (props) => {\n  let expensesContent = <p>No expenses found.</p>;\n\n  if (props.items.length === 0) {\n    return (\n      <h2 className=\"expenses-list__fallback\">{expensesContent}</h2>\n    )\n  }\n\n  return (\n    <ul className=\"expenses-list\">\n      {props.items.map((expense) => (\n      <ExpenseItem\n        // for performance purpose : this key help react to find the individual item that changed (if not react would update all content not just s specific thing)\n        key={expense.id}\n        title={expense.title}\n        amount={expense.amount}\n        date={expense.date}\n      />\n      ))}\n    </ul>\n  );\n};\n\nexport default ExpensesList;\n","import './ChartBar.css';\n\nconst ChartBar = (props) => {\n  let barFillHeight = '0%';\n\n  if (props.maxValue > 0) {\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\n  }\n\n  return (\n    <div className=\"chart-bar\">\n      <div className=\"chart-bar__inner\">\n        <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\n      </div>\n      <div className=\"chart-bar__label\">{props.label}</div>\n    </div>\n  );\n};\n\nexport default ChartBar;\n","import ChartBar from './ChartBar';\nimport './Chart.css';\n\nconst Chart = (props) => {\n  // to transform datapoints from objects to numbers (will return an array of numbers)\n  const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\n  // spred operator will pull out the values of the array so thats its 12 values\n  const totalMaximum = Math.max(...dataPointValues);\n\n  return (\n    <div className=\"chart\">\n      {props.dataPoints.map((dataPoint) => (\n        <ChartBar\n          key={dataPoint.label}\n          value={dataPoint.value}\n          maxValue={totalMaximum}\n          label={dataPoint.label}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Chart;\n","import Chart from '../Chart/Chart';\n\nconst ExpensesChart = (props) => {\n  const chartDataPoints = [\n    { label: \"Jan\", value: 0 },\n    { label: \"Feb\", value: 0 },\n    { label: \"Mar\", value: 0 },\n    { label: \"Apr\", value: 0 },\n    { label: \"May\", value: 0 },\n    { label: \"Jun\", value: 0 },\n    { label: \"Jul\", value: 0 },\n    { label: \"Aug\", value: 0 },\n    { label: \"Sept\", value: 0 },\n    { label: \"Oct\", value: 0 },\n    { label: \"Nov\", value: 0 },\n    { label: \"Dec\", value: 0 },\n  ];\n\n  for (const expense of props.expenses) {\n    const expenseMonth = expense.date.getMonth(); // jan is 0\n    chartDataPoints[expenseMonth].value += expense.amount;\n  }\n\n  return (\n    <Chart dataPoints={chartDataPoints} />\n  )\n};\n\nexport default ExpensesChart;\n","import \"./Expenses.css\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport ExpensesChart from './ExpensesChart';\n\nconst Expenses = (props) => {\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  const filterChangeHandler = (selectedYear) => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filteredExpenses = props.items.filter((expense) => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  });\n\n  return (\n    <div>\n      <Card className=\"expenses\">\n        <ExpensesFilter\n          onChangeFilter={filterChangeHandler}\n          selected={filteredYear}\n        />\n        <ExpensesChart expenses={filteredExpenses}/>\n        <ExpensesList items={filteredExpenses}/>\n      </Card>\n    </div>\n  );\n};\n\nexport default Expenses;\n","import './ExpenseForm.css'\nimport { useState } from 'react';\n\nconst ExpenseForm = (props) => {\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  // We can replace these 3 lines above by 1 line (calling an object)\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: '',\n  //   enteredAmount: '',\n  //   enteredDate: ''\n  // });\n\n  const titleChangeHandler = (event) => {\n    setEnteredTitle(event.target.value);\n    // setUserInput({\n    //   // need to copy the other keys because to make sure we dont loose this data while updating the state\n    //   // to do so we use ...userInput (pulls out all the key-values pairs and brings them to this new objects), which replace: enteredAmount: \"\", enteredDate: \"\",\n    //   ...userInput,\n    //   enteredTitle: event.target.value,\n    // });\n    // the approach below is the one to go because React will guarantee that the state snapshot given in this function will always be the latest state snapshot\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value }\n    // });\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n    // setUserInput({\n    //   ...userInput,\n    //   enteredAmount: event.target.value,\n    //   });\n    };\n\n  const dateChangeHandler = (event) => {\n    setEnteredDate(event.target.value);\n    // setUserInput({\n    // ...userInput,\n    //   enteredDate: event.target.value,\n    //   });\n    };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: +enteredAmount,\n      date: new Date(enteredDate)\n    };\n\n    props.onSaveExpenseData(expenseData);\n\n    // to clear the form after submit\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"date\"\n            min=\"2021-01-01\"\n            max=\"2021-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import './NewExpense.css'\nimport ExpenseForm from './ExpenseForm';\n\nconst NewExpense = (props) => {\n  const saveExpenseDataHandler =(enteredExpenseData) => {\n    const expenseData = {\n      ...enteredExpenseData,\n      id: Math.random().toString()\n    };\n    props.onAddExpense(expenseData);\n  };\n\n  return (\n    <div className=\"new-expense\">\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler}/>\n    </div>\n  )\n};\n\nexport default NewExpense;\n","import Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport React, { useState } from \"react\";\n\n  const dummyData = [\n    {\n      id: \"e1\",\n      title: \"Pour Over Kettle\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Health Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"Wooden Desk\",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(dummyData);\n\n  const addExpenseHandler = (expense) => {\n    // setExpenses([expense, ...expenses]);\n    // Correct way below: we will use a function to use the latest state snapshot (because this depends from previous state)\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      {/* display expenses list by passing expense items */}\n      <Expenses items={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}